01. 逻辑与(&) 逻辑与(&&) 按位与(&)

02. 方法的重载(方法名相同, 参数列表不同(个数, 类型, 顺序(类型顺序)), 与返回值类型无关), 方法的重写(子类重写父类的方法)
    方法签名通过方法名, 参数个数, 参数类型, 参数类型顺序确定, 与返回值类型无关.
	两个方法仅仅返回值类型不同, 编译器认为它们具有相同的签名

03. 数组的声明:
    数据类型[] 数组名 = new 数据类型[m](推荐)
	数据类型 数组名[] = new 数据类型[m]

04. 数组打印结果: [I@15db9742
	[: 一维数组
	I: int
	@: 固定分隔符
	15db9742: 16进制值, 内存地址

05. 基本数据类型的数组定义后有默认初始值(0, 0.0, false)
	基本数据类型的变量必须初始化后才能使用!

06. 数组静态初始化
    1. int[] arr = new int[]{12, 11, 10}
	2. int[] arr = {12, 11, 10}

07. 空指针错误
    int[] arr = {12, 11, 10};
	arr = null;
	System.out.println(arr[0]); // 抛出空指针异常

08. 二维数组声明:
    数据类型[][] 数组名 = new 数据类型[m][n](推荐)
	数据类型 数组名[][] = new 数据类型[m][n]
	数据类型[] 数组名[] = new 数据类型[m][n]

09. 二维数组说明:
    数组的元素也是一个数组.
	数据类型[m][n]: 一个存放一维数组的数组, 二维数组是长度为m的数组, 一维数组是长度为n的数组.
	m行, n列. 行指针, 列指针. 行指针指向一维数组, 列指针指向最终元素

10. 二维数组声明细节:
    int[][] arr = new int[3][2]
	int[][] arr = new int[3][] (一维数组的长度不确定)
	int[][] arr = {{1, 2}, {3, 4}, {5, 6, 7}}

11. 数据类型:
    1. 基本数据类型: byte, short, int, long, char, double, float, boolean. 变量存的是值.
	2. 引用数据类型: 数组, 类, 接口, 枚举. 变量存的是地址.

12. Java的传值与传地址
    1. 基本数据类型传值, 引用数据类型传地址
	2. Java中只有传值, 地址也是值!!!

13. 创建对象
    类名 变量名 = new 类名()
	
14. 垃圾回收机制
    Java会自动回收无用(没有被引用)对象占用的内存空间
	
15. main 方法是整个程序的入口

16. 在同一个 .java 文件中, 不能有 2 个 public 的 class

17. 在同一个包内不能有相同的类

18. 成员变量与局部变量
    成员变量(属性): 在堆内存(对象进堆), 有默认初始值(0, 0.0, false, null)
	局部变量: 在栈内存(方法进栈), 没有默认初始值(赋值后才能使用)
	
19. 匿名对象
    没有用一个变量引用新创建的对象
	
20. 打印对象
    包名.类名@地址
	
21. 权限关键字
    1. private: 只能本类中访问
	
22. 属性声明规范
    1. 使用private关键字
	2. 提供set/get方法
	3. set/get方法名中属性首字母大写
	
23. this关键字
    与Swift中的self关键字同义
	
24. 构造方法
    1. 作用: 给对象的数据(属性)进行初始化赋值
	2. 格式: 方法名与类名相同; 没有返回值类型; 没有return语句; 有权限关键字.
	3. 有参构造方法, 无参构造方法
	4. 构造方法的重载(与普通方法一样, 只是针对构造方法的重载)
	5. 没有给出构造方法, 系统提供默认的无参构造方法(建议永远自己给出无参构造方法)
	6. 给出了构造方法, 系统不再任何提供构造方法
	7. 正确格式 public 类名(...) { ... }